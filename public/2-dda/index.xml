<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>DDA :: App Web</title>
    <link>http://localhost:1313/420-211/2-dda/index.html</link>
    <description>Data-driven Applications L‚Äôune des grandes forces de React est la r√©utilisabilit√© des composants. Un composant bien con√ßu peut √™tre utilis√© plusieurs fois dans une application, avec des donn√©es diff√©rentes, permettant ainsi de r√©duire la duplication du code et de rendre le d√©veloppement plus efficace.&#xA;Ce que nous allons allons explorer dans ce module :&#xA;L‚Äôinsertion de JavaScript dans JSX L‚Äôutilisation des props pour transmettre des donn√©es aux composants La gestion des actifs statiques La mise en correspondance des donn√©es avec les composants</description>
    <generator>Hugo</generator>
    <language>fr-fr</language>
    <atom:link href="http://localhost:1313/420-211/2-dda/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Ins√©rer du JS dans JSX</title>
      <link>http://localhost:1313/420-211/2-dda/1-js-dans-jsx/index.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/420-211/2-dda/1-js-dans-jsx/index.html</guid>
      <description>React permet d‚Äôint√©grer du JavaScript directement dans le JSX √† l‚Äôaide des accolades {}. Cela nous permet d‚Äôafficher des variables, d‚Äôeffectuer des calculs ou d‚Äôutiliser des expressions JavaScript dans notre interface.&#xA;Exemple simple : On peut afficher une variable directement dans du JSX :&#xA;function Greeting() { const name = &#34;Alice&#34;; return &lt;h1&gt;Bonjour, {name} !&lt;/h1&gt;; } Dans cet exemple, la variable name est ins√©r√©e dynamiquement √† l‚Äôint√©rieur du &lt;h1&gt;.&#xA;Exemple avec un calcul : On peut aussi ex√©cuter des calculs dans JSX :</description>
    </item>
    <item>
      <title>Props</title>
      <link>http://localhost:1313/420-211/2-dda/2-props/index.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/420-211/2-dda/2-props/index.html</guid>
      <description>Les props (propri√©t√©s) permettent √† un composant parent de transmettre des informations √† un composant enfant. Elles sont accessibles en tant qu‚Äôattributs dans le JSX et en tant qu‚Äôobjet dans le composant enfant.&#xA;Exemple de composant avec props&#xA;function App() { return ( &lt;div&gt; &lt;WelcomeMessage name=&#34;Alice&#34; /&gt; &lt;WelcomeMessage name=&#34;Bob&#34; /&gt; &lt;/div&gt; ); } Ici, le composant WelcomeMessage est r√©utilis√© avec des valeurs diff√©rentes pass√©es via les props.</description>
    </item>
    <item>
      <title>Gestion des actifs statiques</title>
      <link>http://localhost:1313/420-211/2-dda/3-actifs-statiques/index.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/420-211/2-dda/3-actifs-statiques/index.html</guid>
      <description>Dans une application React, les images et autres fichiers statiques sont g√©n√©ralement plac√©s dans le dossier public ou src/assets.&#xA;Exemple d‚Äôimage import√©e depuis public&#xA;function Logo() { return &lt;img src=&#34;http://localhost:1313/420-211/logo.png&#34; alt=&#34;Logo&#34; /&gt;; } Exemple d‚Äôimage import√©e depuis src/assets&#xA;import logo from &#34;./assets/logo.png&#34;; function Logo() { return &lt;img src={logo} alt=&#34;Logo&#34; /&gt;; } L‚Äôimportation permet d‚Äôassurer que l‚Äôimage est bien prise en compte lors de la compilation.</description>
    </item>
    <item>
      <title>Donn√©es et composants</title>
      <link>http://localhost:1313/420-211/2-dda/4-donnees-composants/index.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/420-211/2-dda/4-donnees-composants/index.html</guid>
      <description>Mise en correspondance Il est courant de g√©n√©rer dynamiquement des composants √† partir d‚Äôun tableau de donn√©es. Cela se fait g√©n√©ralement avec la m√©thode map().&#xA;Exemple de liste d‚Äô√©l√©ments dynamiques const users = [ { id: 1, name: &#34;Alice&#34;, age: 30 }, { id: 2, name: &#34;Bob&#34;, age: 25 }, { id: 3, name: &#34;Charlie&#34;, age: 35 } ]; function UserList() { return ( &lt;ul&gt; {users.map(user =&gt; ( &lt;li key={user.id}&gt;{user.name} - {user.age} ans&lt;/li&gt; ))} &lt;/ul&gt; ); } Dans cet exemple, chaque √©l√©ment de la liste est g√©n√©r√© dynamiquement en utilisant map(), et un key unique est attribu√© √† chaque √©l√©ment pour am√©liorer les performances de React.</description>
    </item>
    <item>
      <title>Exercice dirig√©</title>
      <link>http://localhost:1313/420-211/2-dda/5-exercice-dirige/index.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/420-211/2-dda/5-exercice-dirige/index.html</guid>
      <description>R√©utilisabilit√© des composants L‚Äôobjectif de cet exercice est de refactoriser la page web pr√©c√©demment d√©velopp√©e afin d‚Äôam√©liorer la r√©utilisabilit√© des composants. Vous devrez optimiser votre impl√©mentation en appliquant les bonnes pratiques de d√©veloppement avec React, notamment en structurant le code de mani√®re modulaire et en favorisant la transmission efficace des donn√©es entre les composants.&#xA;üéØ Objectifs :&#xA;Identifier et extraire les √©l√©ments communs dans des composants r√©utilisables. Utiliser les props pour transmettre les donn√©es n√©cessaires aux composants. Simplifier et structurer votre code en √©vitant les r√©p√©titions. Points cl√©s √† am√©liorer :</description>
    </item>
    <item>
      <title>Exercices - JSX et les props</title>
      <link>http://localhost:1313/420-211/2-dda/6-exercices-props/index.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/420-211/2-dda/6-exercices-props/index.html</guid>
      <description>La section suivante pr√©sente une s√©rie d‚Äôexercices visant √† renforcer votre compr√©hension de la transmission des donn√©es entre composants et la r√©utilisabilit√© de ceux-ci.&#xA;Exercice 1 : Affichage dynamique d‚Äôun message d‚Äôaccueil Objectif : Cr√©ez un composant WelcomeBanner qui affiche un message de bienvenue bas√© sur la prop username.&#xA;Instructions&#xA;Cr√©ez un composant WelcomeBanner qui prend une prop username (string) et affiche : &#34;Bienvenue sur notre site, [username] !&#34;. Dans le composant App, utilisez WelcomeBanner avec trois utilisateurs diff√©rents (par exemple, ‚ÄúAlice‚Äù, ‚ÄúBob‚Äù, ‚ÄúCharlie‚Äù). V√©rification</description>
    </item>
  </channel>
</rss>