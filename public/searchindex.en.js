var relearn_searchindex = [
  {
    "breadcrumb": "Applications Web \u003e Préalables \u003e Git/GitHub",
    "content": "Git Bash : Guide pratique Git Bash est un terminal puissant qui permet d’utiliser Git via des commandes en ligne. Contrairement à GitHub Desktop, il offre un contrôle précis et détaillé des opérations Git, idéal pour les utilisateurs qui souhaitent maîtriser les bases et les fonctionnalités avancées de Git. Avec Git Bash, vous pouvez gérer vos dépôts, créer des branches, et effectuer des opérations complexes directement depuis la ligne de commande. Voici un guide étape par étape pour tirer le meilleur parti de Git Bash.\n1. Configuration de votre nom d’utilisateur et de votre email Avant d’utiliser Git, configurez votre identité pour associer vos modifications à votre profil.\nCommande :\ngit config --global user.name \"Votre Nom\" git config --global user.email votre.email@example.com 2. Cloner un dépôt existant Pour travailler sur un projet déjà hébergé sur GitHub :\nCopiez l’URL du dépôt GitHub. Exécutez la commande suivante dans Git Bash pour cloner le dépôt sur votre machine : git clone \u003clien_du_dépôt\u003e Exemple :\ngit clone https://github.com/votre-utilisateur/votre-projet.git 3. Initialiser un dépôt (pour un nouveau projet) Si vous commencez un nouveau projet, vous devez initialiser un dépôt Git dans le dossier correspondant.\nCommande :\ngit init 4. Ajouter des fichiers au dépôt Une fois que vous avez des fichiers à suivre, ajoutez-les à la gestion de versions avec Git.\nCommande pour ajouter un fichier spécifique :\ngit add \u003cnom_du_fichier\u003e Commande pour ajouter tous les fichiers :\ngit add * 5. Créer un commit Un commit permet d’enregistrer vos modifications dans l’historique de Git avec un message descriptif.\nCommande :\ngit commit -m \"Description de vos modifications\" 6. Envoyer vos modifications sur GitHub Si le dépôt est déjà connecté à GitHub, envoyez vos modifications :\nCommande :\ngit push origin \u003cnom_de_la_branche\u003e Exemple :\ngit push origin main 7. Créer une nouvelle branche Pour travailler sur une fonctionnalité ou corriger un bug, créez une nouvelle branche.\nCommande :\ngit branch \u003cnom_de_la_branche\u003e Exemple :\ngit branch feature-nouvelle-fonctionnalité 8. Changer de branche Pour passer d’une branche à une autre.\nCommande :\ngit checkout \u003cnom_de_la_branche\u003e Exemple :\ngit checkout feature-nouvelle-fonctionnalité Pour plus de détails sur les commandes Git, vous pouvez consulter le Cheat Sheet officiel : https://training.github.com/downloads/fr/github-git-cheat-sheet.pdf",
    "description": "Git Bash : Guide pratique Git Bash est un terminal puissant qui permet d’utiliser Git via des commandes en ligne. Contrairement à GitHub Desktop, il offre un contrôle précis et détaillé des opérations Git, idéal pour les utilisateurs qui souhaitent maîtriser les bases et les fonctionnalités avancées de Git. Avec Git Bash, vous pouvez gérer vos dépôts, créer des branches, et effectuer des opérations complexes directement depuis la ligne de commande. Voici un guide étape par étape pour tirer le meilleur parti de Git Bash.",
    "tags": [],
    "title": "Guide Git Bash",
    "uri": "/420-211/0-intro/7-git-github/git-bash/index.html"
  },
  {
    "breadcrumb": "Applications Web \u003e Préalables",
    "content": "Structure d’un document HTML Un document HTML se compose d’éléments organisés comme une hiérarchie ayant la forme d’une arbre inversé. Chaque noeud dans cet arbre correspond à un type d’élément HTML qui peut avoir plusieurs noeuds enfants et au maximum un parent. Seule la racine (le noeud document, au sommet de la hiérarchie) n’a pas de parent.\nL’exemple suivant correspond à un document HTML simple:\n\u003c!DOCTYPE html\u003e \u003chtml\u003e \u003chead\u003e \u003cscript src=\"lib.js\"\u003e\u003c/script\u003e \u003ctitle\u003ePage perso\u003c/title\u003e \u003c/head\u003e \u003cbody\u003e \u003ch1\u003eBienvenue\u003c/h1\u003e \u003cdiv\u003eVoici du texte\u003c/div\u003e \u003ca href=\"https://www.google.com\"\u003eVoici un lien\u003c/a\u003e \u003c/body\u003e \u003c/html\u003e Ce qui correspond au modèle suivant:\nObjet document Javascript comprend un objet nommé document qui permet d’accéder aux informations du DOM, de modifier des valeurs d’attributs ou du texte, d’ajouter, de supprimer ou de déplacer des éléments HTML, etc.\nL’objet document comprend plusieurs méthodes pour accéder aux éléments du DOM; Parmi celles-ci:\ngetElementById()\nRetourne l’élément HTML dont l’attribut id correspond à la valeur passée.\ngetElementByTagName()\nRetourne une collection d’éléments HTML dont les noms correspondent à la valeur passée.\ngetElementByClassName()\nRetourne une collection d’éléments HTML dont les attributs class correspondent à la valeur passée.\nPar exemple pour le code HTML suivant:\n\u003c!DOCTYPE html\u003e \u003chtml\u003e \u003cbody\u003e \u003ch1 class=\"title\"\u003eTitre\u003c/h1\u003e \u003ch2 class=\"title\"\u003eSous-titre\u003c/h2\u003e \u003cdiv\u003e \u003cp id=\"par1\" class=\"parag\"\u003ePremier paragraphe\u003c/p\u003e \u003cp id=\"par2\" class=\"parag\" \u003eDeuxième paragraphe\u003c/p\u003e \u003c/div\u003e \u003c/body\u003e \u003c/html\u003e getElementById(\"par1\") retourne l’élément \u003cp\u003e “Premier paragraphe”; getElementsByTagName(\"p\") retourne tous les éléments \u003cp\u003e; getElementsByClassName(\"title\") retourne les éléments \u003ch1\u003e et \u003ch2\u003e. Attention Lorsque ces méthodes retournent plus d’un élément, ceux-ci font partie d’une collection et on doit utiliser une boucle pour accéder à chacun individuellement.\nPropriétés des éléments Les éléments HTML contiennent d’innombrables propriétés et méthodes qu’on peut utiliser pour en modifier le contenu. Ici nous verrons les propriétés innerHTML et style.\nNote Pour la référence complète de l’objet Element du DOM: https://www.w3schools.com/jsref/dom_obj_all.asp.\ninnerHTML Permet d’accéder le contenu HTML d’un élément ou de le modifier. Par exemple, pour le document HTML de l’exemple plus haut:\nlet el = document.getElementById(\"par1\"); el.innerHTML=\"Bonjour\"; Le texte “Premier paragraphe” sera remplacé par “Bonjour”.\nAttention, le texte ainsi inséré est interprété comme du HTML. On peut ainsi modifier indirectement la structure du DOM; par exmeple:\nlet elems = document.getElementsByClassName(\"parag\"); for (let i=0;i\u003celems.length;i++) { elems[i].innerHTML=\"\u003ch1\u003eBonjour\u003c/h1\u003e\"; } Les deux éléments \u003cp\u003e contiendront chacun un élément \u003ch1\u003e ayant le texte “Bonjour”.\nstyle La propriété style permet de changer les attributs de style. Tous les styles qui peuvent être définis par l’attribut HTML “style” ou dans un fichier CSS sont accessibles par javascript. Les noms des styles sont légèrement différents cependant car ils suivent la nomenclature “camelCase”: par exemple, la propriété CSS background-color est appelée backgroundColor dans javascript.\nPar exemple, pour mettre en gras le texte des paragraphes d’un document:\nlet elems = document.getElementsByTagName(\"p\"); for (let i=0;i\u003celems.length;i++) { elems[i].style.fontWeight=\"bold\"; } Note Pour la référence complète des propriétés de style : https://www.w3schools.com/jsref/dom_obj_style.asp\nCSS Il est possible de modifier l’apparence des éléments d’une page directement dans le code HTML en utilisant les attributs de style. Par exemple, pour changer la couleur du texte d’un paragraphe:\n\u003cdiv\u003e \u003cp\u003eTexte normal\u003c/p\u003e \u003cp style=\"color:red\"\u003eTexte rouge\u003c/p\u003e \u003cp style=\"background-color:yellow\"\u003eArrière-plan jaune\u003c/p\u003e \u003c/div\u003e On recommande cependant de regrouper ces propriétés dans un fichier CSS: ceci permet de centraliser les éléments de style et de permettre plus facilement les modifications. Par exemple, si on souhaite que les citations dans un texte soient en italique, sans serif et de couleur grise, on pourra définir une classe nommée quote dans un fichier CSS et y spécifier ces propriétés typographiques, comme suit:\n.quote { font-family: sans-serif; color: grey; font-style: italic; } Par la suite, on attribue la classe quote à l’élément HTML dont on veut modifier le style:\n\u003cp class=\"quote\"\u003eAlea Jacta Est\u003c/p\u003e Pour que le navigateur puisse retrouver le fichier CSS où le style est défini, il faut y ajouter une référence dans le fichier HTML dans un élément \u003clink\u003e. En supposant que le fichier qui contient les styles se nomme styles.css, on aura donc le code HTML suivant:\n\u003c!DOCTYPE html\u003e \u003chtml\u003e \u003chead\u003e \u003clink href=\"styles.css\" rel=\"stylesheet\"\u003e \u003c/head\u003e \u003cbody\u003e \u003cp class=\"quote\"\u003eAlea Jacta Est\u003c/p\u003e \u003cp\u003e- Jules César\u003c/p\u003e \u003c/body\u003e \u003c/html\u003e Note Une référence complète des propriétés CSS est disponible sur le site https://www.w3schools.com/cssref/index.php.\nExercices Exercice 1 À partir du DOM suivant, faites le fichier HTML correspondant (Nommez votre fichier exercice-dom-1.html) :\nExercice 2 Dans le document exercice-dom-2.html, les éléments ont des attributs id. En utilisant des appels à la fonction getElementById(), remplacez les mots “apple”, “pear” et “banana” par “pomme”, “poire” et “banane”. (vous devez créer le fichier exercice-dom-2.js)\nExercice 3 Dans le document exercice-dom-3.html, certains éléments ont un attribut class. Créez le fichier exercice-dom-3.js et utilisez la fonction getElementsByClass(), pour modifier le style du texte afin que celui-ci utilise la fonte Arial et soit écrit en bleu.\nExercice 4 À partir du document exercice-dom-4.html, définissez la fonction associée au bouton pour basculer en mode sombre en modifiant les styles des éléments HTML. Vous pouvez utiliser le site suivant pour les références aux couleurs : https://htmlcolorcodes.com/.\nLe résultat devrait ressembler à ceci (les titres sont en vert pâle et le texte en gris) :\nExercice 5 En utilisant un fichier css, définissez des classes de style pour obtenir la page suivante à partir du fichier exercice-css.html :",
    "description": "Structure d’un document HTML Un document HTML se compose d’éléments organisés comme une hiérarchie ayant la forme d’une arbre inversé. Chaque noeud dans cet arbre correspond à un type d’élément HTML qui peut avoir plusieurs noeuds enfants et au maximum un parent. Seule la racine (le noeud document, au sommet de la hiérarchie) n’a pas de parent.\nL’exemple suivant correspond à un document HTML simple:\n\u003c!DOCTYPE html\u003e \u003chtml\u003e \u003chead\u003e \u003cscript src=\"lib.js\"\u003e\u003c/script\u003e \u003ctitle\u003ePage perso\u003c/title\u003e \u003c/head\u003e \u003cbody\u003e \u003ch1\u003eBienvenue\u003c/h1\u003e \u003cdiv\u003eVoici du texte\u003c/div\u003e \u003ca href=\"https://www.google.com\"\u003eVoici un lien\u003c/a\u003e \u003c/body\u003e \u003c/html\u003e Ce qui correspond au modèle suivant:",
    "tags": [],
    "title": "HTML, DOM et CSS",
    "uri": "/420-211/0-intro/1-html-dom-css/index.html"
  },
  {
    "breadcrumb": "Applications Web \u003e Préalables",
    "content": "Javascript dispose de manières alternatives pour exprimer les conditions. Celles-ci sont plus utilisées que la syntaxe if/else traditionnelle.\nOpérateur ternaire Les conditions qui définissent deux alternatives utilisent l’opérateur ternaire, ainsi nommé pare qu’il prend trois opérandes : un pour la condition à évaluer, un pour la cas vrai et un pour le cas faux.\nLa syntaxe est CONDITION ? Cas vrai : Cas faux. Par exemple, les deux structures suivantes sont équivalentes:\nlet i=10; // Condition classique if (i % 2 == 0) { console.log(\"i est pair\"); } else { console.log(\"i est impair\"); } // Opérateur ternaire i % 2 == 0 ? console.log(\"i est pair\") : console.log(\"i est impair\") Opérateur \u0026\u0026 L’opérateur de conjonction (“ET” logique) est aussi utilisé dans les conditions.\nLorsque deux expressions sont reliées par \u0026\u0026, les deux doivent être vraies pour que la conjonction soit vraie. Donc lorsque JavaScript évalue des expressions reliées par \u0026\u0026, il évalue d’abord la première, et si celle-ci est fausse il ne va pas plus loin car nécessairement toute l’expression sera fausse. À l’inverse, si la première expression est vraie, javascript doit évaluer la deuxième pour déterminer si l’ensemble est vrai ou faux.\nLe fait que javascript parcourt ainsi les conjonctions de gauche à droite pour les évaluer nous permet d’utiliser l’opérateur \u0026\u0026 pour exprimer des conditions.\nLa syntaxe est donc : CONDITION \u0026\u0026 Cas vrai. Les deux structures suivantes sont équivalentes:\nlet i=10; // Condition classique if (i % 2 == 0) { console.log(\"i est pair\"); } // Opérateur \u0026\u0026 i % 2 == 0 \u0026\u0026 console.log(\"i est pair\") Exercice Réécrivez les conditions suivantes avec l’opérateur \u0026\u0026 ou ternaire, selon le cas :\nconst liste1 = [] const var1 = 0 const var2 = { actif: true, ident:\"S33-12B\", position: [45.61835861911019, -73.60698829870468] } if (liste1.length == 0) { console.log(\"la liste1 est vide\") } if (var1 == 0) { console.log(\"var1 vaut 0\") } else { console.log(\"var1 est différent de 0\") } if (var1 == 0) { var2.position = [] } if (var2.actif) { liste1.push(1) } else { liste1.push(0) }",
    "description": "Javascript dispose de manières alternatives pour exprimer les conditions. Celles-ci sont plus utilisées que la syntaxe if/else traditionnelle.\nOpérateur ternaire Les conditions qui définissent deux alternatives utilisent l’opérateur ternaire, ainsi nommé pare qu’il prend trois opérandes : un pour la condition à évaluer, un pour la cas vrai et un pour le cas faux.\nLa syntaxe est CONDITION ? Cas vrai : Cas faux. Par exemple, les deux structures suivantes sont équivalentes:",
    "tags": [],
    "title": "Conditions JS",
    "uri": "/420-211/0-intro/2-conditions-js/index.html"
  },
  {
    "breadcrumb": "Applications Web \u003e Préalables \u003e Git/GitHub",
    "content": "GitHub Desktop : Guide Pratique GitHub Desktop est une application graphique conviviale qui simplifie l’utilisation de Git. Contrairement à Git Bash, elle permet de gérer vos dépôts sans avoir à taper de commandes en ligne. Voici un guide étape par étape pour utiliser GitHub Desktop efficacement.\nGit : Guide pratique 1. Cloner un dépôt GitHub existant Ouvrez GitHub Desktop. Cliquez sur File \u003e Clone Repository ou utilisez le bouton Clone Repository visible sur l’interface principale. Entrez l’URL du dépôt GitHub ou sélectionnez-en un directement depuis votre compte GitHub connecté. Choisissez un dossier local où le dépôt sera stocké sur votre machine. Astuce : Si vous travaillez sur plusieurs dépôts, organisez-les dans des dossiers dédiés pour une meilleure gestion.\n2. Ajouter des fichiers à votre projet Ajoutez les fichiers nécessaires dans le dossier local du dépôt que vous avez cloné. GitHub Desktop détecte automatiquement les modifications apportées à ces fichiers.\n3. Créer un commit Revenez à l’interface principale de GitHub Desktop. Les modifications non validées apparaîtront dans la section Changes. Rédigez un message descriptif dans le champ dédié (par exemple : « Ajout de la page d’accueil »). Cliquez sur Commit to main (ou le nom de la branche active) pour enregistrer les modifications dans l’historique du dépôt. Conseil : Rédigez des messages de commit clairs et précis pour faciliter le suivi des modifications.\n4. Synchroniser avec le dépôt distant Une fois les commits réalisés, cliquez sur Push origin pour envoyer vos modifications vers le dépôt distant hébergé sur GitHub. Les modifications seront alors disponibles sur le dépôt distant. Vos collaborateurs pourront ainsi accéder aux dernières mises à jour. Bon à savoir : GitHub Desktop facilite la synchronisation en affichant clairement l’état de votre dépôt (par exemple, si des modifications doivent être poussées ou récupérées).\n5. Créer une nouvelle branche Allez dans le menu Branch \u003e New Branch. Donnez un nom descriptif à votre branche (par exemple : feature-page-contact). Sélectionnez la branche nouvellement créée pour commencer à travailler dessus. Remarque : Utiliser des branches permet de travailler sur des fonctionnalités spécifiques sans affecter le code principal.\nGitHub Desktop est un outil puissant pour gérer vos projets Git de manière visuelle et intuitive. Prenez le temps d’explorer ses fonctionnalités pour améliorer votre productivité !",
    "description": "GitHub Desktop : Guide Pratique GitHub Desktop est une application graphique conviviale qui simplifie l’utilisation de Git. Contrairement à Git Bash, elle permet de gérer vos dépôts sans avoir à taper de commandes en ligne. Voici un guide étape par étape pour utiliser GitHub Desktop efficacement.\nGit : Guide pratique 1. Cloner un dépôt GitHub existant Ouvrez GitHub Desktop. Cliquez sur File \u003e Clone Repository ou utilisez le bouton Clone Repository visible sur l’interface principale. Entrez l’URL du dépôt GitHub ou sélectionnez-en un directement depuis votre compte GitHub connecté. Choisissez un dossier local où le dépôt sera stocké sur votre machine. Astuce : Si vous travaillez sur plusieurs dépôts, organisez-les dans des dossiers dédiés pour une meilleure gestion.",
    "tags": [],
    "title": "Guide GitHub Desktop",
    "uri": "/420-211/0-intro/7-git-github/github-desktop/index.html"
  },
  {
    "breadcrumb": "Applications Web \u003e Préalables",
    "content": "Avec JavaScript, on utilise souvent des objets.\nUn objet est une manière de regrouper sous un même nom une structure de données qui contient plusieurs valeurs. Par exemple, une variable nommée car peut contenir différentes informations reliées à une voiture, comme le nom de la marque, le modèle et l’année:\nconst car = { brand: \"Hyundai\", model: \"Ioniq 5\", year: 2022 } Chacune de ces informations est une propriété de l’objet.\nPour référer aux valeurs des propriétés d’un objet, on utilise un point (par exemple car.model):\nconst car = { brand: \"Hyundai\", model: \"Ioniq 5\", year: 2022 } console.log(car.brand) // Affiche Hyundai console.log(car.model) // Affiche Ioniq 5 console.log(car.year) // Affiche 2022 Les objets peuvent contenir d’autres objets (et même des fonctions !); par exemple un objet person peut avoir les propriétés lastName, firstName et address, et address peut elle-même être un objet qui contient les propriétés number, street et city:\nconst person = { lastName: \"Chicoine\", firstName: \"Louis\", address: { number: \"2222\", street:\"Des Prés\", city:\"Sherbrooke\" } } console.log(person.lastName, person.firstName) // Affiche Chicoine Louis console.log(person.address.number, person.address.street) // Affiche 2222 Des Prés console.log(person.address.city) // Affiche Sherbrooke Enfin, il est possible d’organiser les objets dans des tableaux. Dans ce cas-ci, on devra utiliser un indice entre crochets (par exemple maListe[0]) pour référer à un des objets du tableau. Dans l’exemple suivant, car est un tableau d’objets; selon la valeur de i, les informations affichés seront différentes :\nconst car = [ { brand: \"Hyundai\", model: \"Ioniq 5\", year: 2022 }, { brand: \"Audi\", model: \"R8\", year: 2019 } ] const i=0; console.log(car[i].brand) console.log(car[i].model) console.log(car[i].year)",
    "description": "Avec JavaScript, on utilise souvent des objets.\nUn objet est une manière de regrouper sous un même nom une structure de données qui contient plusieurs valeurs. Par exemple, une variable nommée car peut contenir différentes informations reliées à une voiture, comme le nom de la marque, le modèle et l’année:\nconst car = { brand: \"Hyundai\", model: \"Ioniq 5\", year: 2022 } Chacune de ces informations est une propriété de l’objet.\nPour référer aux valeurs des propriétés d’un objet, on utilise un point (par exemple car.model):",
    "tags": [],
    "title": "Objets JS",
    "uri": "/420-211/0-intro/3-objets-js/index.html"
  },
  {
    "breadcrumb": "Applications Web \u003e Préalables",
    "content": "Chaque fois que l’on souhaite effectuer une tâche répétitive, on utilise des fonctions. En Javascript, il existe plusieurs syntaxes pour déclarer une fonction.\nFonctions nommées Une fonction nommée commence par le mot-clé function, suivi du nom de la fonction (dans l’exemple ci-dessous : logCompliment). Le corps de la fonction et ses instructions (i.e. son bloc d’instruction) sont définis entre des accolades :\nfunction logCompliment() { console.log(\"Vous vous débrouillez très bien !\") ; } Une fois la fonction déclarée, vous l’invoquez ou l’appelez pour la voir s’exécuter :\nfunction logCompliment() { console.log(\"Vous vous débrouillez très bien !\") ; } logCompliment() ; Fonctions anonymes Une autre option serait d’utiliser la syntaxe de fonction anonyme, ce qui revient à déclarer la fonction comme une variable :\nconst logCompliment = function() { console.log(\"Vous vous débrouillez très bien !\") ; }; logCompliment(); Le resultat est le même. La seule différence, c’est qu’il n’est pas possible d’invoquer une fonction anonyme avant de la déclarer :\n// Invoquer la fonction avant de la déclarer hey(); // Fonction nommée function hey() { alert(\"hey!\"); } // Invoquer la fonction avant de la déclarer hey(); // Fonction anonyme const hey = function() { alert(\"hey!\"); }; TypeError: hey is not a function Passage d’arguments Une fonction peut prendre un ou plusieurs arguments en entrée :\nconst logCompliment = function(firstName) { console.log(`Vous vous débrouillez très bien, ${firstName}`); }; logCompliment(\"Molly\"); const logCompliment = function(firstName, message) { console.log(`${firstName}: ${message}`); }; logCompliment(\"Molly\", \"Tu es vraiment cool !\"); Retour de fonctions La fonction logCompliment affiche un compliment sur la console, mais le plus souvent, une fonction est utilisée pour retourner une valeur.\nPour cela, on utilise le mot-clé return.\nconst createCompliment = function(firstName, message) { return `${firstName} : ${message}` ; } ; createCompliment(\"Molly\", \"You're so cool\") ; console.log(createCompliment(\"You're so cool\", \"Molly\")) ; Arguments par défaut Il est possible d’avoir des valeurs par défaut pour les arguments. Dans le cas ou la valeur n’est pas fournie, la valeur par défaut est utilisée :\nfunction logActivity(name = \"Shane McConkey\", activity = \"skier\") { console.log(`${name} adore ${activity}`); } const defaultPerson = { name: { first: \"Shane\", last: \"McConkey\" }, favActivity: \"skier\" }; function logActivity(person = defaultPerson) { console.log(`${person.name.first} adore ${person.favActivity}`); } Fonctions fléchées Une façon plus “moderne” de déclarer une fonction est d’utiliser la syntaxe des fonctions fléchées. Avec les fonctions fléchées, il est possible de déclarer des fonctions sans utiliser le mot-clé function. Souvent, il n’est pas non plus nécessaire d’utiliser le mot-clé return.\nFonction anonyme :\nconst lordify = function(firstName) { return `${firstName} de Canterbury`; }; console.log(lordify(\"Dale\")); // Seigneur Dale de Canterbury console.log(lordify(\"Gail\")); // Seigneur Gail de Canterbury Fonction fléchées :\nconst lordify = firstName =\u003e `${firstName} de Canterbury`; Si la fonction possède plus d’un argument, il doivent être entourés de parenthèses :\n// Fonction anonyme const lordify = function(firstName, land) { return `${firstName} de ${land}`; }; // Fonction fléchée const lordify = (firstName, land) =\u003e `${firstName} of ${land}`; console.log(lordify(\"Don\", \"Piscataway\")); // Don de Piscataway console.log(lordify(\"Todd\", \"Schenectady\")); // Todd de Schenectady Cette fonction peut tenir sur une seule ligne car il n’y a qu’une seule déclaration à renvoyer. S’il y a plusieurs lignes, il faut utiliser des accolades :\nconst lordify = (firstName, land) =\u003e { if (!firstName) { throw new Error(\"Un prénom doit être fourni\"); } if (!land) { throw new Error(\"Un territoire doit être fourni\"); } return `${firstName} de ${land}`; }; console.log(lordify(\"Kelly\", \"Sonoma\")); // Kelly de Sonoma console.log(lordify(\"Dave\")); // ! JAVASCRIPT ERROR Exercices Exercice 1 Faites un programme qui génère deux nombres aléatoires entre 0 et 100, fait les 4 opérations arithmétiques dessus et affiche les résultats à la console. Votre programme doit être composé de :\nUne fonction nommée add qui prend deux paramètres et retourne leur somme; Une fonction nommée sub qui prend deux paramètres et retourne leur différence; Une fonction nommée mult qui prend deux paramètres et retourne leur produit; Une fonction nommée div qui prend deux paramètres et retourne leur division; Une fonction nommée calc qui prend deux paramètres et affiche à la console le résultat des 4 opérations sur ces deux nombres; Une fonction anonyme (sans paramètres) qui génère deux entiers aléatoirement et appelle calc() avec ces deux nombres. Toutes les fonctions doivent être dans le même fichier, s1-ex2.js Pour générer un nombre aléatoire et le stocker dans une variable (par exemple la variable x), utilisez l’instruction suivante: let x = Math.floor(Math.random() * 100) Exercice 2 Tranformer les fonctions de l’exercice 1 en fonctions fléchées. Les fonctions add, sub, mult, div et calc doivent tenir sur une seule ligne.",
    "description": "Chaque fois que l’on souhaite effectuer une tâche répétitive, on utilise des fonctions. En Javascript, il existe plusieurs syntaxes pour déclarer une fonction.\nFonctions nommées Une fonction nommée commence par le mot-clé function, suivi du nom de la fonction (dans l’exemple ci-dessous : logCompliment). Le corps de la fonction et ses instructions (i.e. son bloc d’instruction) sont définis entre des accolades :\nfunction logCompliment() { console.log(\"Vous vous débrouillez très bien !\") ; } Une fois la fonction déclarée, vous l’invoquez ou l’appelez pour la voir s’exécuter :",
    "tags": [],
    "title": "Fonctions JS",
    "uri": "/420-211/0-intro/4-fonctions-js/index.html"
  },
  {
    "breadcrumb": "Applications Web \u003e Préalables",
    "content": "Depuis la version 5 de ECMAScript (et surtout avec la version 6), la syntaxe de JavaScript a beaucoup évolué pour aller vers une meilleure cohérence et une meilleure robustesse dans le code produit. Ce chapitre résume les évolutions les plus importantes.\nDéclaration de variable avec let et const Le mot-clé var est utilisé en JavaScript pour déclarer des variables.\nvar i = 0; Cependant la notion de déclaration de variable est particulière en JavaScript par rapport à la plupart des autres langages de programmation proches. var n’empêche pas de déclarer à nouveau une variable avec le même nom et la portée des variables est particulière à JavaScript. Si la variable est déclarée au plus haut niveau, il s’agit d’une variable globale mais si elle déclarée ailleurs, sa portée correspond à la fonction dans laquelle elle est déclarée. Cela peut entraîner des effets de bord difficiles à comprendre :\nvar globalVar = \"globale\"; function myFunction() { var localVar = \"locale\"; if (true) { var localVar2 = \"locale 2\"; } console.log(globalVar); console.log(localVar); console.log(localVar2); } myFunction(); // Affiche // globale // locale // locale 2 À la ligne 7, la variable localVar2 est déclarée dans le bloc if mais, contrairement à d’autres langages de programmation, la portée de cette variable est la fonction. Donc il est possible d’accéder à sa valeur à la ligne 11 après le bloc if.\nPour corriger ce comportement tout en maintenant la rétro-compatibilité pour le code existant, ES6 introduit le mot-clé let.\nlet j = 0; Une variable déclarée avec let ne peut pas être déclarée à nouveau et sa portée est limitée au bloc dans lequel elle est déclarée.\nAttention Pour tout nouveau code, il est recommandé d’utiliser let pour déclarer toutes les variables.\nAvec ES6, on dispose également du mot-clé const pour garantir que la déclaration est constante (une fois déclarée, sa valeur ne peut pas être modifiée) :\nconst pi = 3.1416; Structure for … of Une nouvelle structure de contrôle for a été ajoutée avec ES6 pour permettre de parcourir les objets itérables. Il s’agit de la structure for ... of\nfor (let v of vowels) { console.log(v); } // Affiche // a // e // i // o // u // y Les tableaux et les chaînes de caractères sont des objets itérables. Il est donc très facile de les parcourir avec cette nouvelle structure de contrôle.\nfor (let i of [1, 2, 3, 4]) { console.log(i); } for (let l of \"Bonjour\") { console.log(l); } Gabarit de chaîne de caractères ES6 introduit les gabarits de chaîne de caractères (template string) pour formater plus facilement des données dans des chaînes de caractères. Plutôt que d’utiliser l’opérateur + de concaténation :\nlet a = 1; let b = 2; let message = \"La somme de \" + a + \" et de \" + b + \" est \" + (a + b) + \".\"; On peut utiliser le caractère ` pour délimiter la chaîne de caractères et préciser les noms des variables avec ${} :\nlet a = 1; let b = 2; let message = `La somme de ${a} et de ${b} est ${a + b}`; La syntaxe est plus concise et bien plus lisible. La valeur donnée avec ${} peut être une expression complète : un appel de fonction, l’attribut d’un objet…\nlet message = `La circonférence d'un cercle de rayon 3 est ${(2 * Math.PI * 3).toFixed(3)}`; console.log(message); // Affiche La circonférence d'un cercle de rayon 3 est 18.850 L’utilisation du caractère ` pour délimiter une chaîne de caractères permet également d’écrire cette chaîne sur plusieurs lignes :\nlet message = `Ceci est un message. Ce message est sur plusieurs lignes. Il sera affiché également sur plusieurs lignes.`; console.log(message); // Affiche : // Ceci est un message. // Ce message est sur plusieurs lignes. // Il sera affiché également sur plusieurs lignes. Paramètre de reste (Spread Operator) Avec l’opérateur ..., il est possible de déclarer une liste quelconque de paramètres correspondant au reste des paramètres. Cette liste sera vue comme un tableau à l’intérieur de la fonction\nfunction add(x1, x2, ...others) { let result = x1 + x2; for (let n of others) { result += n; } return result; } console.log(add(1, 2)); // Affiche 3 console.log(add(1, 2, 4)); // Affiche 7 console.log(add(1, 2, 4, 8)); // Affiche 15 Décomposition de tableaux L’opérateur ... sert également à la décomposition de tableau qui permet de passer les paramètres à l’appel d’une fonction sous la forme d’un tableau.\nlet args = [2, 3]; function add(x, y) { console.log(x + y); } add(...args); // Affiche 5 Affectation de tableau par décomposition L’affectation par décomposition (destructuring assignment) permet de réaliser des affectations multiples à partir d’un tableau.\nOn peut déclarer un tableau de variables à gauche de l’affectation.\nconst arr = [1, 2, 3]; let [a, b, c] = arr; console.log(a); // Affiche 1 console.log(b); // Affiche 2 console.log(c); // Affiche 3 Nous pouvons utiliser cette syntaxe pour intervertir la valeur de deux variables.\nlet a = 1: let b = 2: [a, b] = [b, a]; // a vaut 2 et b vaut 1 Le tableau à gauche de l’affectation peut avoir une taille différent du tableau à droite de l’affectation. Si le tableau à gauche est plus petit, les éléments en plus à droite ne sont pas pris en compte.\nlet [a, b] = [1, 2, 3, 4]; // a vaut 1 et b vaut 2 Si le tableau à gauche de l’affectation est plus grand, les éléments en plus reçoivent la valeur undefined.\nlet [a, b, c, d] = [1, 2]; // a vaut 1, b vaut 2, c et d valent undefined On peut utiliser l’opérateur de reste ... pour affecter à une variable tous les éléments restant :\nlet [a, ...b] = [1, 2, 3, 4]; // a vaut 1 et b vaut [2, 3, 4] Affectation d’objet par décomposition L’affectation par décomposition (destructuring assignment) permet également de réaliser des affectations multiples à partir d’un objet. Dans ce cas, le nom des variables à gauche de l’affectation correspondent au nom des propriétés de l’objet.\nconst person = { firstName: \"David\", lastName: \"Gayerie\" }; let {firstName, lastName} = person; console.log(firstName); // Affiche David console.log(lastName); // Affiche Gayerie Comme pour l’affectation de tableau par décomposition, on peut spécifier moins de variables à gauche ou plus de variables ou utiliser l’opérateur de reste … pour affecter les propriétés restantes sous la forme d’un nouvel objet.\nconst person = { firstName: \"David\", lastName: \"Gayerie\", height: 174 }; let {firstName, lastName} = person; // firstName vaut \"David\" et lastName vaut \"Gayerie\" const person = { lastName: \"Gayerie\", }; let {firstName, lastName} = person; // nom vaut \"David\" et prenom vaut undefined const person = { firstName: \"David\", lastName: \"Gayerie\", height: 174 }; let {height, ...fullName} = personne; // height vaut 174 // fullName vaut {firstName: \"David\", lastName: \"Gayerie\"} Exercices Exercice 1 Réécrivez le code ci-dessous pour utiliser la décomposition pour assigner chaque valeur du tableau items :\nlet items = [\"Egg\", 0.25, 12]; let name = items[0]; let price = items[1]; let quantity = items[2]; console.log(`Item: ${name}, Quantité: ${quantity}, Prix: ${price}`); Exercice 2 Nous avons un objet user. Affectez par décomposition :\nla propriété name dans une variable name. la propriété years dans une variable age. la propriété isAdmin dans une variable isAdmin (false, si cette propriété n’existe pas). const user = { name: \"John\", years: 30 }; // Votre code ici : const {} = user; console.log(name); // John console.log(age); // 30 console.log(isAdmin); // false Exercice 3 Réécrivez le code ci-dessous pour utiliser la décomposition au lieu d’assigner chaque valeur à une variable :\nconst person = [12, \"Chris\", \"Owen\"]; const firstName = person[1]; const lastName = person[2]; const age = person[0]; console.log(`Personne : - Age: ${age}, Nom: ${firstName} ${lastName}`); Exercice 4 Utilisez l’affectation par décomposition pour récupérer tous les noms des tableaux imbriqués dans moreStudents :\nconst moreStudents = [ 'Chris', ['Ahmad', 'Antigoni'], ['Toby', 'Sam'] ]; // Votre code ici : const [] = moreStudents; console.log(student1, student2, student3, student4, student5); Exercice 5 Écrivez une fonction combineTwoArrays qui prend deux tableaux en argument et retourne un seul tableau qui fusionne les deux (en utilisant l’opérateur spread).\nExercice 6 Écrivez une fonction combineAllArrays qui peut prendre un nombre quelconque de tableaux en argument et retourne un seul tableau qui les fusionne tous.",
    "description": "Depuis la version 5 de ECMAScript (et surtout avec la version 6), la syntaxe de JavaScript a beaucoup évolué pour aller vers une meilleure cohérence et une meilleure robustesse dans le code produit. Ce chapitre résume les évolutions les plus importantes.\nDéclaration de variable avec let et const Le mot-clé var est utilisé en JavaScript pour déclarer des variables.\nvar i = 0; Cependant la notion de déclaration de variable est particulière en JavaScript par rapport à la plupart des autres langages de programmation proches. var n’empêche pas de déclarer à nouveau une variable avec le même nom et la portée des variables est particulière à JavaScript. Si la variable est déclarée au plus haut niveau, il s’agit d’une variable globale mais si elle déclarée ailleurs, sa portée correspond à la fonction dans laquelle elle est déclarée. Cela peut entraîner des effets de bord difficiles à comprendre :",
    "tags": [],
    "title": "JS depuis ES5",
    "uri": "/420-211/0-intro/5-es5-js/index.html"
  },
  {
    "breadcrumb": "Applications Web \u003e Préalables",
    "content": "Définition La programmation fonctionnelle est un paradigme de programmation qui insiste sur l’évaluation d’appel de fonctions plutôt que sur l’utilisation de variables et de blocs imbriqués (for, if…).\nLes fonctions ont toujours été des objets de plein droit en JavaScript. Il est par exemple possible de créer des fonctions anonymes et de les affecter à des variables ou de les passer en paramètre d’autres fonctions.\nImpératif vs déclaratif La programmation fonctionnelle fait partie d’un paradigme de programmation plus large : la programmation déclarative.\nLa programmation déclarative est un style de programmation dans lequel les applications sont structurées de telle sorte à donner la priorité à qu’est-ce qui doit se produire plutôt qu’à comment cela doit se produire.\nUtilisation de .forEach() Une première application de la programmation fonctionnelle consiste à repenser le parcours de boucle sous la forme d’un appel à la méthode Array.forEach à laquelle on passe une fonction à appeler pour chaque élément.\nlet t = [1, 2, 3, 4]; t.forEach(e =\u003e console.log(e)); Le modèle filter/map/reduce Un modèle classique de traitement d’un tableau d’éléments dans une approche fonctionnelle consiste à envisager trois opérations fondamentales :\nfilter : Permet de ne retenir qu’une partie des éléments d’un tableau. map : Permet de changer la nature des éléments lors du traitement. reduce : permet de réduire l’ensemble des éléments à une seule valeur grâce à l’utilisation d’un accumulateur. JavaScript fournit depuis ES5 les méthodes Array.filter, Array.map et Array.reduce qui attendent toutes en paramètre une fonction à appliquer pour chaque élément du tableau.\nSi on désire filtrer les éléments d’un tableau pour créer un autre tableau, on peut utiliser la méthode Array.filter.\nlet t = [1, 2, 3, 4]; let odds = t.filter(x =\u003e x % 2); console.log(odds); // Affiche [1, 3] Si on veut modifier les éléments d’un tableau en créant un nouveau tableau, on peut utiliser la méthode Array.map. Le code ci-dessous, permet de créer un tableau de nombres à partir d’un tableau de chaînes de caractères.\nlet t = [\"2\", \"101\", \"324\"]; let numbers = t.map(x =\u003e parseInt(x, 10)); console.log(numbers); // Affiche [2, 101, 324] Si on veut créer un résultat unique à partir d’un tableau, on peut utiliser la méthode Array.reduce. Cette dernière attend en paramètre une fonction qui prend deux paramètres : l’élément courant et l’élément résultat de l’appel précédent. On parle d’une fonction accumulatrice.\nlet t = [1, 2, 3]; let result = t.reduce((a, b) =\u003e a + b); console.log(result); // Affiche 6 On peut chaîner ces méthodes pour obtenir des traitements complexes.\nlet celsius = [0, 12, -2, 6, -18, 32]; let min_farenheit = celsius.filter(x =\u003e x \u003e 0) .map(x =\u003e 1.8 * x + 32) .reduce((x, y) =\u003e x \u003c y ? x : y); console.log(min_farenheit); // Affiche 48.8 Le code ci-dessous parcourt un tableau de températures en degré Celsius, élimine les températures négatives ou égales à zéro, transforme les températures en degré Fahrenheit, puis conserve la température minimale par réduction.\nExercices Exercice 1 Utilisez filter() pour créer une nouvelle liste (liste2) qui ne contient que les nombres positifs de liste1\nconst liste1 = [-23,230,334,-90,-76,132,-77,305] Exercice 2 Utilisez filter() pour créer une nouvelle liste (liste2) qui ne contient que les nombres pairs positifs de liste1\nconst liste1 = [-23,230,334,-90,-76,132,-77,305] Exercice 3 Utilisez filter() pour éliminer les multiples de 10 dans liste1\nconst liste1 = [-23,230,334,-90,-76,132,-77,305] Exercice 4 Utilisez filter() pour éliminer les mots de plus de 5 caractères dans liste1\nconst liste1 = ['ami','carotte','midi','toujours','hier','demain'] Exercice 5 Utilisez filter() pour conserver les personnes dont le email ne se termine pas par .com dans liste1\nconst liste1 = [ {\"nom\":\"Charity\",\"prenom\":\"Selar\",\"email\":\"cselar0@cloudflare.com\"}, {\"nom\":\"Noel\",\"prenom\":\"Jermy\",\"email\":\"njermy1@bbb.org\"}, {\"nom\":\"Killian\",\"prenom\":\"Keri\",\"email\":\"kkeri2@sphinn.com\"}, {\"nom\":\"Aleta\",\"prenom\":\"Thurl\",\"email\":\"athurl3@bandcamp.com\"}, {\"nom\":\"Edna\",\"prenom\":\"Ingyon\",\"email\":\"eingyon4@telus.ca\"} ] Exercice 6 Utilisez map() pour créer une liste qui ne contient que la taille des mots de liste1\nconst liste1 = ['ami','carotte','midi','toujours','hier','demain'] Exercice 7 Utilisez map() pour créer une liste qui ne contient que le carré des nombres de liste1\nconst liste1 = [-23,230,334,-90,-76,132,-77,305] Exercice 7 Utilisez map() pour créer une liste qui ne contient que les prénoms des personnes dans liste1\nconst liste1 = [ {\"nom\":\"Charity\",\"prenom\":\"Selar\",\"email\":\"cselar0@cloudflare.com\"}, {\"nom\":\"Noel\",\"prenom\":\"Jermy\",\"email\":\"njermy1@bbb.org\"}, {\"nom\":\"Killian\",\"prenom\":\"Keri\",\"email\":\"kkeri2@sphinn.com\"}, {\"nom\":\"Aleta\",\"prenom\":\"Thurl\",\"email\":\"athurl3@bandcamp.com\"}, {\"nom\":\"Edna\",\"prenom\":\"Ingyon\",\"email\":\"eingyon4@telus.ca\"} ] Exercice 8 Utiliser filter(), map() et reduce() pour calculer la somme des carrés des nombres positifs de liste1\nconst liste1 = [-23,230,334,-90,-76,132,-77,305] Exercice 9 Ecrivez une fonction qui utilise forEach() pour afficher chaque élément d’un tableau dans la console. La fonction ne doit prendre qu’un seul argument, le tableau. La fonction ne doit PAS utiliser une boucle for traditionnelle.\nExercice 10 Ecrivez une fonction appelée sum qui utilise la méthode reduce pour additionner un tableau de nombres.\nExemples :\nsum([1,2,3,4,5]) ; //rend 15 sum([6,7,7]) ; //rend 20 Exercice 11 Ecrivez une fonction appelée reduceMin qui utilise reduce pour retourner le minimum d’un tableau de nombres donné en argument.\nExemples :\nreduceMin([2, 3, 4, 5, 1]) ; //retourne 1 reduceMin([6, 7, 7, 4]) ; // retourne 4 reduceMin([10, 0, 100, 1, -100, 20, 33]) ; //retourne -100 Exercice 12 Ecrivez une fonction nommée countOddsAndEvens qui prend un tableau de nombres. Cette fonction doit renvoyer un objet ayant deux propriétés : odds et evens, qui contiennent respectivement le nombre de nombres impairs et pairs du tableau. N’utilisez pas de boucle for, while ou forEach.\nExemples :\ncountOddsAndEvens([11, 2, 36, 4, 15]) ; // renvoie {odds : 2, pairs : 3} countOddsAndEvens([1, 2, 3, 4, 5, 5, 99, 101]) ; // renvoie {odds : 6, pairs : 2}",
    "description": "Définition La programmation fonctionnelle est un paradigme de programmation qui insiste sur l’évaluation d’appel de fonctions plutôt que sur l’utilisation de variables et de blocs imbriqués (for, if…).\nLes fonctions ont toujours été des objets de plein droit en JavaScript. Il est par exemple possible de créer des fonctions anonymes et de les affecter à des variables ou de les passer en paramètre d’autres fonctions.\nImpératif vs déclaratif La programmation fonctionnelle fait partie d’un paradigme de programmation plus large : la programmation déclarative.",
    "tags": [],
    "title": "Programmation fonctionnelle",
    "uri": "/420-211/0-intro/6-prog-fonctionnelle/index.html"
  },
  {
    "breadcrumb": "Applications Web \u003e Préalables",
    "content": "Introduction Git est un système de gestion de versions distribué, conçu pour suivre et gérer les modifications apportées aux fichiers au fil du temps. Il est largement utilisé dans le développement logiciel, permettant une collaboration efficace entre les développeurs tout en conservant un historique complet des changements.\nLes principales fonctionnalités de Git incluent :\nLa gestion simultanée de plusieurs versions d’un projet. La possibilité de revenir à des états antérieurs en cas de besoin. La facilitation du travail en équipe sur un même projet, tout en minimisant les conflits liés aux modifications. ** image sur la fonctionnalité ** image sur les branchements + explication\nNous allons, à travers ce guide, explorer deux méthodes d’utilisation de Git :\nGit Bash, un outil en ligne de commande. GitHub Desktop, une application graphique. Git Bash Qu’est-ce que Git Bash et pourquoi est-il important ? Git Bash est un terminal qui permet d’utiliser Git via des commandes. Il offre un environnement Unix sur votre ordinateur, simplifiant l’exécution des commandes, particulièrement pour les utilisateurs de Windows.\nUtiliser Git Bash est essentiel pour gérer efficacement vos projets grâce à un contrôle précis et rapide. Il permet d’approfondir votre compréhension des bases de Git et d’automatiser certaines tâches. De plus, maîtriser la ligne de commande est un atout majeur dans le développement logiciel professionnel.\nInstallation Rendez-vous sur le site officiel de Git : https://git-scm.com/ Téléchargez et installez Git en suivant les instructions adaptées à votre système d’exploitation. Pendant l’installation, laissez les options par défaut, sauf indication contraire. GitHub Desktop Qu’est-ce que GitHub Desktop ? GitHub Desktop est une application graphique qui simplifie l’utilisation de Git. Contrairement à Git Bash, il ne nécessite pas de lignes de commande, ce qui en fait une excellente option pour les débutants ou ceux qui préfèrent une interface visuelle.\nFonctionnalités principales Interface conviviale pour gérer vos dépôts. Synchronisation simplifiée avec GitHub. Gestion visuelle des branches et des commits. Installation de GitHub Desktop Allez sur le site officiel de GitHub Desktop : https://desktop.github.com/. Téléchargez et installez l’application pour votre système d’exploitation. Connectez-vous à votre compte GitHub ou créez-en un si nécessaire.",
    "description": "Introduction Git est un système de gestion de versions distribué, conçu pour suivre et gérer les modifications apportées aux fichiers au fil du temps. Il est largement utilisé dans le développement logiciel, permettant une collaboration efficace entre les développeurs tout en conservant un historique complet des changements.\nLes principales fonctionnalités de Git incluent :\nLa gestion simultanée de plusieurs versions d’un projet. La possibilité de revenir à des états antérieurs en cas de besoin. La facilitation du travail en équipe sur un même projet, tout en minimisant les conflits liés aux modifications. ** image sur la fonctionnalité ** image sur les branchements + explication",
    "tags": [],
    "title": "Git/GitHub",
    "uri": "/420-211/0-intro/7-git-github/index.html"
  },
  {
    "breadcrumb": "",
    "content": "Bienvenue au cours 420-211 - Applications Web ! Plan du cours Module 0 - Préalables\nModule 1 - Introduction à React\nModule 2 - Application basées sur des données (data-driven applications)\nModule 3 - États et cycle de vie (React states)\nModule 4 - Introduction aux “hooks” : useEffect()",
    "description": "Bienvenue au cours 420-211 - Applications Web ! Plan du cours Module 0 - Préalables\nModule 1 - Introduction à React\nModule 2 - Application basées sur des données (data-driven applications)\nModule 3 - États et cycle de vie (React states)\nModule 4 - Introduction aux “hooks” : useEffect()",
    "tags": [],
    "title": "Applications Web",
    "uri": "/420-211/index.html"
  },
  {
    "breadcrumb": "Applications Web",
    "content": "",
    "description": "",
    "tags": [],
    "title": "Categories",
    "uri": "/420-211/categories/index.html"
  },
  {
    "breadcrumb": "Applications Web",
    "content": "1. HTML, DOM et CSS Une petite révision des concepts vus dans le cours de création de sites Web :\nHTML Manipulation simple du DOM Style avec CSS 2. Conditions JS Introduction à l’opérateur \u0026\u0026 et l’opérateur ternaire 3. Objets JS Introduction aux objets JavaScript : déclaration, affectation et accès aux paramètres.\n4. Fonctions JS Les différentes syntaxes pour déclarer une fonction en Javascript :\nFonctions nommées Fonctions anonymes Fonctions fléchées 5. JS depuis ES5 Introduction aux syntaxes modernes de javascript introduites depuis la version 5\nDéclaration de variable avec let et const La structure for … of Gabarit de chaîne de caractères Valeur par défaut des paramètres Paramètre de reste (Spread Operator) Décomposition de tableaux Affectation de tableau par décomposition Affectation d’objet par décomposition 6. Programmation fonctionnelle Introduction à la programmation fonctionnelle avec JavaScript\nDéfinition Utilisation de .forEach() Le modèle filter/map/reduce 7. Git/GitHub Introduction à la gestion de code et au versionnage Introduction à git et GitHub Mise en place du dépot du cours",
    "description": "1. HTML, DOM et CSS Une petite révision des concepts vus dans le cours de création de sites Web :\nHTML Manipulation simple du DOM Style avec CSS 2. Conditions JS Introduction à l’opérateur \u0026\u0026 et l’opérateur ternaire 3. Objets JS Introduction aux objets JavaScript : déclaration, affectation et accès aux paramètres.\n4. Fonctions JS Les différentes syntaxes pour déclarer une fonction en Javascript :\nFonctions nommées Fonctions anonymes Fonctions fléchées 5. JS depuis ES5 Introduction aux syntaxes modernes de javascript introduites depuis la version 5",
    "tags": [],
    "title": "Préalables",
    "uri": "/420-211/0-intro/index.html"
  },
  {
    "breadcrumb": "Applications Web",
    "content": "",
    "description": "",
    "tags": [],
    "title": "Tags",
    "uri": "/420-211/tags/index.html"
  }
]
